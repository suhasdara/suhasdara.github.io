<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[The Suhas Space]]></title><description><![CDATA[Suhas Dara's personal website.]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 14 Oct 2021 18:50:11 GMT</lastBuildDate><item><title><![CDATA[The Development Journey for Choosing an Architecture]]></title><description><![CDATA[This blog describes the journey that I, a developer took to decide the
architecture to use for the implementation of a recent project I have been
working on. It demonstrates the thought process a developer goes through to
come to a resolution.]]></description><link>https://suhasdara.me/blogs/dev-journey-architecture</link><guid isPermaLink="false">https://suhasdara.me/blogs/dev-journey-architecture</guid><pubDate>Thu, 14 Oct 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This blog describes the journey that I, a developer took to decide the
architecture to use for the implementation of a recent project I have been
working on. It demonstrates the thought process a developer goes through to
come to a resolution.&lt;/p&gt;&lt;p&gt;Let&amp;#x27;s commence the journey!&lt;/p&gt;&lt;p&gt;When you have an idea that you want to implement, as an individual developer,
or maybe even as a part of an organization, you look for the cheapest and
easiest solutions for the architecture of your implementation. That is exactly
what I did as well when I started the implementation of my web project (&lt;strong&gt;top
secret&lt;/strong&gt;). My project involves dealing with a lot of data, but originally, I
thought that it wasn&amp;#x27;t nearly enough data to justify the need for a backend. I
decided to stick with my familiarity and host a static website for free on
GitHub Pages as I have previously done (this website!).&lt;/p&gt;&lt;h3&gt;Static website with GitHub Pages&lt;/h3&gt;&lt;h4&gt;Problem 1&lt;/h4&gt;&lt;p&gt;As I started generating and cleaning my data, I realized that in a static
website, any data that I store would be directly accessible by anyone visiting
the website by simply opening the developer console in the browser and looking
at the network traffic or the sources. This was a no-go in my situation as I
needed the data to not be visible directly to the user. I researched numerous
ways of encryption and decryption and decided to use AES to encrypt all the
data and only decrypt something when it is needed. I thought that would be it,
but that&amp;#x27;s when I ran into another problem.&lt;/p&gt;&lt;h4&gt;Problem 2&lt;/h4&gt;&lt;p&gt;As I generated more data, I realized I had upwards of 600MB of data. Now, for
a static website, this is a problem, because every time the website is
accessed, all that data will have to be loaded by the browser. Slow internet
connections will really struggle with the website. However, I was
tunnel-visioned to use a free static website host and was determined to make
it work. But with more time and a few days of wasted work, I decided to
abandon the static website approach and concluded that I would need a proper
backend or at least a database.&lt;/p&gt;&lt;h3&gt;The quest for a database&lt;/h3&gt;&lt;p&gt;The data that I had was a lot of nested JSONs (up to 5 or 6 levels deep). This
data was hierarchical in nature and a structured database such as MySQL or
PostgreSQL would be of no use, or at the very least, it would be a lot of work
to transform the data into a format that would suit those structured
databases. Alright, so let&amp;#x27;s look at the options.&lt;/p&gt;&lt;h4&gt;Heroku&lt;/h4&gt;&lt;p&gt;I first looked at Heroku&amp;#x27;s free tier. Unfortunately, while Heroku did have
free options to run a backend service, I wasn&amp;#x27;t satisfied with their support
for NoSQL databases. They offered &lt;strong&gt;Redis&lt;/strong&gt; and &lt;strong&gt;MongoDB&lt;/strong&gt;. While Redis was
suitable for my project, the free limit was far too low, and MongoDB was
outright unsuitable based on my prior experience.&lt;/p&gt;
      
  &lt;img  alt=&quot;Heroku Redis&quot; title=&quot;Heroku Redis&quot; src=&quot;https://suhasdara.me/static/0f07098a524ca43c06ec21da6474c4b1/0b533/heroku.png&quot;    loading=&quot;lazy&quot; decoding=&quot;async&quot;/&gt;
    &lt;h4&gt;Amazon Web Services (AWS)&lt;/h4&gt;&lt;p&gt;I then thought I would take a look at AWS. AWS offered &lt;strong&gt;DynamoDB&lt;/strong&gt;, a NoSQL
database with monthly free limits that were well suited for my purposes.
However, I did not have a very good time with AWS in the past when I used it
for two university projects (&lt;a href=&quot;https://suhasdara.me/projects/deepfakes&quot;&gt;Deepfakes&lt;/a&gt; and
&lt;a href=&quot;https://suhasdara.me/projects/travel-scares-me&quot;&gt;Travel Scares Me&lt;/a&gt;) because the documentation is
very unnerving, and you often have to rely on tutorials. I kept this as a
backup plan if I could not find anything better.&lt;/p&gt;
      
  &lt;img  alt=&quot;AWS DynamoDB&quot; title=&quot;AWS DynamoDB&quot; src=&quot;https://suhasdara.me/static/73a77a34e5f8f9d60b94d12c3282de79/0b533/aws.png&quot;    loading=&quot;lazy&quot; decoding=&quot;async&quot;/&gt;
    &lt;h4&gt;Microsoft Azure&lt;/h4&gt;&lt;p&gt;Next up, Azure. I had never used or considered Azure before for any of my
projects. This probably was a bias for me when I looked at Azure &lt;strong&gt;CosmosDB&lt;/strong&gt;.
Similar to Heroku, they offered support for &lt;strong&gt;MongoDB&lt;/strong&gt;, but also for
&lt;strong&gt;Cassandra&lt;/strong&gt;, which I had not used before and wasn&amp;#x27;t exactly sure was right
for my use case. With my existing bias, when I noticed that CosmosDB was only
free for 12 months, I steered away (sorry Azure).&lt;/p&gt;
      
  &lt;img  alt=&quot;Azure CosmosDB&quot; title=&quot;Azure CosmosDB&quot; src=&quot;https://suhasdara.me/static/badaed6ddcfdc2392b8925af7016f49a/0b533/azure.png&quot;    loading=&quot;lazy&quot; decoding=&quot;async&quot;/&gt;
    &lt;h4&gt;Google Cloud Platform (GCP)&lt;/h4&gt;&lt;p&gt;Last stop was GCP. I had previously only used GCP for getting access to API
keys for Google Maps and Google Translate. I had some familiarity with their
console. So, imagine my delight when I learned that the &lt;strong&gt;Cloud Firestore&lt;/strong&gt;
was created to solve problems almost identical to mine. Remember when I said
my data was all JSONs? Well, straight from Firestore documentation: &amp;quot;You may
notice that documents look a lot like JSON. In fact, they basically are. ...
in general, you can treat documents as lightweight JSON records.&amp;quot;&lt;/p&gt;
      
  &lt;img  alt=&quot;Cloud Firestore&quot; title=&quot;Cloud Firestore&quot; src=&quot;https://suhasdara.me/static/8e02f73ab617ef43ca88430a999ea420/0b533/gcp.png&quot;    loading=&quot;lazy&quot; decoding=&quot;async&quot;/&gt;
    &lt;p&gt;However, this time I wanted to be more careful and make sure all my
requirements can be fulfilled by GCP before moving forward with Firestore. I
found that Google Compute Engine (GCE) provided a free virtual machine (VM)
instance that, from a preliminary estimate, could host both my frontend and
backend. I was all set, or so I thought.&lt;/p&gt;&lt;h3&gt;The data dilemma&lt;/h3&gt;&lt;h4&gt;Shock #1&lt;/h4&gt;&lt;p&gt;As I said before, I had a lot of data. However, this data was unchanging. This
meant that I had to write the data to Firestore only once, and read as
necessary in the future. As I thought about that, I was hit with an unpleasant
realization. If I had to write 600MB of data to Firestore as individual JSON
documents, that would amount to over 5,500,000 writes. The daily limit for
writes to Firestore is 20,000. It would take me 9 months to write all my data
to Firestore if I wanted to stick to free limits! At that one moment, I
wished I had chosen DynamoDB which has a monthly limit as opposed to a daily
limit. But I decided to soldier on.&lt;/p&gt;&lt;p&gt;I found ways to reduce the size of my data to 150MB and even shift some of the
data computation to the backend instead of computing everything beforehand and
pre-caching. This brought down the writes to about 6000! So, I immediately
decided to test this - at worst I would lose a day or two messing with the
data while staying under the free limits...&lt;/p&gt;&lt;h4&gt;Shock #2&lt;/h4&gt;&lt;p&gt;Firestore reads have a limit too, 50,000 a day to be precise. By shifting a
majority of the computation to the backend from pre-caching, I had essentially
skyrocketed the number of reads I would be needing to serve each request by
the frontend. I was needing close to 1300 reads to serve a single request!
This means I would only be able to serve 38 requests a day, which is simply
pathetic. This essentially made the idea of using Firestore for pre-caching
the data unviable.&lt;/p&gt;&lt;h4&gt;Resolution&lt;/h4&gt;&lt;p&gt;After battling with different amounts of pre-caching in Firestore, something
suddenly clicked in my mind. Why do I even need to pre-cache in Firestore!?
I could pre-cache in the backend itself in-memory. It would not only be
faster to work with in-memory computations, but I won&amp;#x27;t have to deal with
Firestore as much anymore. It would result in a lengthy cold start for the
first request because of the minimal amount of reads from Firestore and some
relatively heavy computation involved in the pre-caching, but this was
something I was ready to deal with. So now all that was left was to set up
instances for the frontend and backend.&lt;/p&gt;&lt;h3&gt;Hosting the website&lt;/h3&gt;&lt;p&gt;When I had picked GCP as the cloud platform to host my website, I was only
aware of Google Compute Engine (GCE) as a platform to host services.&lt;/p&gt;&lt;h4&gt;Google Compute Engine (GCE)&lt;/h4&gt;&lt;p&gt;GCE&amp;#x27;s free tier includes a single e2-micro instance, which provides 0.25 vCPUs
(virtual CPUs) and 1GB RAM. Even though my preliminary estimates had convinced
me that this would be sufficient to host both my frontend and backend, I had
started to second guess that estimate. Additionally, working with GCE is akin
to working on a fresh virtual machine because GCE is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Infrastructure_as_a_service&quot;&gt;Infrastructure as a
Service (IaaS)&lt;/a&gt;.
I was not keen on having to deal with disk images and especially network
routing, so I started looking for alternatives within GCP.&lt;/p&gt;
      
  &lt;img  alt=&quot;Google Compute Engine&quot; title=&quot;Google Compute Engine&quot; src=&quot;https://suhasdara.me/static/8d4d15fcd8ba232cb9416d28a16915d3/0b533/gcp-gce.png&quot;    loading=&quot;lazy&quot; decoding=&quot;async&quot;/&gt;
    &lt;h4&gt;Google App Engine (GAE)&lt;/h4&gt;&lt;p&gt;As I scoured the GCP documentation and products, I found GAE. As opposed to
GCE, GAE is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;Platform as a Service
(PaaS)&lt;/a&gt;. GAE provides
F-instances and B-instances which each scale in a different manner -
F-instances autoscale, B-instances are manually scaled. GAE&amp;#x27;s free tier
includes 28hrs/day of F1-instances (256MB RAM, 600MHz CPU limit) and 9hrs/day
of B2-instances (512MB RAM, 1.2GHz CPU limit). Historically, F-instances were
intended for frontend services, and B-instances were intended for backend
services. Though that is not the case anymore, I decided to follow it that
way.&lt;/p&gt;
      
  &lt;img  alt=&quot;Google App Engine&quot; title=&quot;Google App Engine&quot; src=&quot;https://suhasdara.me/static/9d3580c75f87a124775395f647c9c043/0b533/gcp-gae.png&quot;    loading=&quot;lazy&quot; decoding=&quot;async&quot;/&gt;
    &lt;p&gt;I deployed my frontend and backend services to GAE using an F1-instance and
a B2-instance respectively. It was as simple as creating two YAML files for
the configuration of the instances and another YAML file for the routing
between the instances. The frontend service worked perfectly without any
hassles, however, my backend service showed some erratic behavior by randomly
shutting down.&lt;/p&gt;&lt;p&gt;I wasn&amp;#x27;t exactly sure what the problem was so the first thing I did was to run
memory profilers on my backend application. I learned one important lesson by
doing this. There is a difference between how much space the data takes on
disk in JSON format as compared to using Python dictionaries in memory. While
on disk the data was 150MB, the backend process was using closer to 380MB.
Interestingly, this was still within the B2-instance memory limit. I
struggled to find an answer for the erratic behavior and even posted to
StackOverflow which I don&amp;#x27;t usually do unless I am desperate (which I was at
this point).&lt;/p&gt;&lt;p&gt;I started to look for other solutions to the problem, and that&amp;#x27;s when I found
yet another product of GCP... The gift that keeps giving, isn&amp;#x27;t it?&lt;/p&gt;&lt;h4&gt;Google Cloud Run&lt;/h4&gt;&lt;p&gt;I randomly found Cloud Run when I was looking at the GCP dashboard. I didn&amp;#x27;t
know what it did, but it was under the same category as GAE, so I tried
researching it. I learned that Cloud Run is also a PaaS product that can be
used as a replacement for GAE and has even lesser maintenance overheads (no
need for even a YAML configuration!) Additionally, the scaling of Cloud Run
is easier to understand than having to pick from the different instance
options that GAE offers.&lt;/p&gt;
      
  &lt;img  alt=&quot;Google Cloud Run&quot; title=&quot;Google Cloud Run&quot; src=&quot;https://suhasdara.me/static/3e637c51f7c66a867c894afe7bc2268f/0b533/gcp-run.png&quot;    loading=&quot;lazy&quot; decoding=&quot;async&quot;/&gt;
    &lt;p&gt;I also learned that GAE uses virtual machines underneath (essentially built
over GCE) while Cloud Run is built over Google Kubernetes Engine (GKE).
Considering how much Google is now pushing Kubernetes as a scaling solution,
I am surprised Cloud Run does not seem as popular as App Engine (judging
based on the resources available outside documentation).&lt;/p&gt;&lt;p&gt;Anyways, Cloud Run had a really simple learning curve, and I could essentially
move my backend service that was built for GAE to Cloud Run with almost no
changes and just Dockerizing my app. I was however concerned about the free
tier limits as they felt rather cryptic to the naked eye. However,
&lt;a href=&quot;https://cloud.google.com/products/calculator&quot;&gt;GCP&amp;#x27;s Pricing Calculator&lt;/a&gt;
seemed to promise great limits within the free tier based on my needs. Note
that I still believed that 512MB of RAM would be sufficient for my service
based on my App Engine experience.&lt;/p&gt;&lt;p&gt;I deployed my backend to Cloud Run and started testing it. To my
disappointment, the service was still erratically shutting down. I dove into
debugging once again. Based on a hunch and logs (yes, Cloud Run has logs!), I
investigated the memory usage once again. I read about the &lt;a href=&quot;https://psutil.readthedocs.io/en/latest/#psutil.Process.memory_info&quot;&gt;&lt;code&gt;memory_info&lt;/code&gt;
function&lt;/a&gt;
in the &lt;code&gt;psutil&lt;/code&gt; module in Python that I was using for memory profiling and
learned about two different metrics for the memory usage of a process! What I
had originally looked at was the Resident Set Size (RSS) which amounted to
about 380MB. However, what was important to consider was the Virtual Memory
Size (VMS) or the total amount of memory used by a process including shared
libraries (Should have paid more attention in that OS class...)
Well, this VMS metric revealed that my service actually required closer to
850MB memory. I think this is a lesson to stay light on the number of
libraries your application is using.&lt;/p&gt;&lt;p&gt;Stumped with being unable to reduce my process size significantly, I decided
to simply increase the memory limit to 1GB in my Cloud Run instance. And just
like that, my backend service started working as intended. However, I am still
monitoring the billing aspect of this memory limit increase, which seems to
be nil for the moment. In hindsight, I wonder if the shift from GAE to Cloud
Run was even necessary. It does seem to bring larger benefits, more
flexibility, and simpler to understand scaling of instances, so I can only
hope it wasn&amp;#x27;t in vain!&lt;/p&gt;&lt;h3&gt;Epilogue&lt;/h3&gt;&lt;p&gt;As a developer, this blog describes a journey that probably was relatable to
you if you are a developer as well. You often start with assumptions that may
or may not be true. You explore different paths to try and build your product
under those assumptions, but they just won&amp;#x27;t work at times. But with the
endless amount of technology now available, and with the entire Cloud at our
disposal, the developer journey sure has become more enjoyable.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Understanding Strings in Python]]></title><description><![CDATA[Learn the differences between different string literals in Python and how
escape characters work differently between them. Also understand the encoding
and decoding functionality with Python strings.]]></description><link>https://suhasdara.me/blogs/python-strings</link><guid isPermaLink="false">https://suhasdara.me/blogs/python-strings</guid><pubDate>Mon, 20 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Learn the differences between different string literals in Python and how
escape characters work differently between them. Also understand the encoding
and decoding functionality with Python strings.&lt;/p&gt;&lt;p&gt;While working on a recent project, I was dealing with a lot of strings
containing Unicode characters. For a long time I was trying to print the raw
unicode codes for debugging purposes and went down a rabbit hole trying to
understand the difference between raw strings, byte strings, encoding, decoding
and a lot more. It was a little frustrating to be unable to figure out
something seemingly simple. I want to demystify the experience that I had with strings
in Python.&lt;/p&gt;&lt;p&gt;First let&amp;#x27;s get the basics out of the way... You can use either double quotes
or single quotes to create strings in Python. You can also use triple quotes
(&lt;code&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/code&gt; or &lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;) to create multi-line strings.&lt;/p&gt;&lt;pre&gt;&lt;code&amp;nbsp;class=\&quot;language-python\&quot;&gt;s1&amp;nbsp;=&amp;nbsp;&amp;#x27;This&amp;nbsp;is&amp;nbsp;a&amp;nbsp;string&amp;#x27;&amp;#13;&amp;#10;s2&amp;nbsp;=&amp;nbsp;&amp;quot;This&amp;nbsp;is&amp;nbsp;also&amp;nbsp;a&amp;nbsp;string&amp;quot;&amp;#13;&amp;#10;m1&amp;nbsp;=&amp;nbsp;&amp;#x27;&amp;#x27;&amp;#x27;This&amp;nbsp;is&amp;nbsp;a&amp;#13;&amp;#10;multi&amp;nbsp;line&amp;nbsp;string&amp;#x27;&amp;#x27;&amp;#x27;&amp;#13;&amp;#10;m2&amp;nbsp;=&amp;nbsp;&amp;quot;&amp;quot;&amp;quot;This&amp;nbsp;is&amp;nbsp;also&amp;nbsp;a&amp;#13;&amp;#10;multi&amp;nbsp;line&amp;nbsp;string&amp;quot;&amp;quot;&amp;quot;&amp;#13;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Strings can have characters &amp;quot;escaped&amp;quot; out of the string using the backslash
to represent some other entities. Common ones include &lt;code&gt;\n&lt;/code&gt; for representing
a newline or &lt;code&gt;\t&lt;/code&gt; for representing a tab. To use the single quote inside a
single-quote-string, you have to escape it with &lt;code&gt;\&amp;#x27;&lt;/code&gt; and similarly for using
a double quote inside a double-quote-string, you have to escape it with &lt;code&gt;\&amp;quot;&lt;/code&gt;.
To get a backslash itself within a string you have to escape it like &lt;code&gt;\\&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Sometimes, you may have a string with a lot of backslashes. Python has a
way to reduce the clutter of escaped backslashes within strings backslashes.
In Python, you can create raw strings, in which the backslash does not trigger
an escape sequence and is treated as a normal character. This can be useful in
certain situations such as dealing with paths on a Windows system. These raw
strings are represented as &lt;code&gt;r&amp;quot;&amp;quot;&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&amp;nbsp;class=\&quot;language-python\&quot;&gt;s1&amp;nbsp;=&amp;nbsp;&amp;quot;I\thave\tescape\tcharacters&amp;quot;&amp;#13;&amp;#10;print(s1)&amp;nbsp;&amp;nbsp;#&amp;nbsp;prints&amp;nbsp;&amp;quot;I&amp;nbsp;&amp;nbsp;have&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;escape&amp;nbsp;&amp;nbsp;characters&amp;quot;&amp;#13;&amp;#10;s2&amp;nbsp;=&amp;nbsp;r&amp;quot;I\tdon&amp;#x27;t\thave\tescape\tcharacters&amp;quot;&amp;#13;&amp;#10;print(s2)&amp;nbsp;&amp;nbsp;#&amp;nbsp;prints&amp;nbsp;&amp;quot;I\tdon&amp;#x27;t\thave\tescape\tcharacters&amp;quot;&amp;#13;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In Python 3.5, format strings were first introduced into Python. This allowed
the string representations of variables to be directly injected into strings.
Format strings are represented as &lt;code&gt;f&amp;quot;&amp;quot;&lt;/code&gt; and you can inject the value of any
variable into the string using curly braces (and escape curly braces using
&lt;code&gt;{{&lt;/code&gt; or &lt;code&gt;}}&lt;/code&gt;). Format strings can also be combined with raw strings to
form raw format strings (&lt;code&gt;rf&amp;quot;&amp;quot;&lt;/code&gt;). For example:&lt;/p&gt;&lt;pre&gt;&lt;code&amp;nbsp;class=\&quot;language-python\&quot;&gt;age&amp;nbsp;=&amp;nbsp;20&amp;#13;&amp;#10;s&amp;nbsp;=&amp;nbsp;f&amp;quot;I&amp;nbsp;am&amp;nbsp;{age}&amp;nbsp;years&amp;nbsp;old&amp;quot;&amp;#13;&amp;#10;print(s)&amp;nbsp;&amp;nbsp;#&amp;nbsp;prints&amp;nbsp;&amp;quot;I&amp;nbsp;am&amp;nbsp;20&amp;nbsp;years&amp;nbsp;old&amp;quot;&amp;#13;&amp;#10;s&amp;nbsp;=&amp;nbsp;rf&amp;quot;I&amp;nbsp;am&amp;nbsp;{{&amp;nbsp;{age}&amp;nbsp;}}&amp;nbsp;years&amp;nbsp;old&amp;nbsp;¯\_(ツ)_/¯&amp;quot;&amp;#13;&amp;#10;print(s)&amp;nbsp;&amp;nbsp;#&amp;nbsp;prints&amp;nbsp;&amp;quot;I&amp;nbsp;am&amp;nbsp;{&amp;nbsp;20&amp;nbsp;}&amp;nbsp;years&amp;nbsp;old&amp;nbsp;¯\_(ツ)_/¯&amp;quot;&amp;#13;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But this is all basics that you already likely know. Let&amp;#x27;s move to the parts
that can get confusing.&lt;/p&gt;&lt;p&gt;First, what exactly is a string? It is a &amp;quot;string&amp;quot; of characters you may say.
But what is a character? In crude terms, a character is a single byte of
information that represents something that humans can understand. The mapping
that represents character to bytes conversion is an encoding format known as
ASCII, which covers 128 different basic characters and escape characters. For
now, let&amp;#x27;s assume that this is the only way characters can be encoded.&lt;/p&gt;&lt;p&gt;Every character in ASCII is represented by 8 bits of data, which is the binary
representation of the character. For example, the character &amp;quot;K&amp;quot; in binary
(base-2, the language of computers) is &lt;code&gt;01001011&lt;/code&gt;. Similarly, other number
systems such as octal (base-8) or hexadecimal (base-16) can be used to
represent binary more succinctly. For example, the equivalent for character
&amp;quot;K&amp;quot; in octal is &lt;code&gt;0113&lt;/code&gt; and in hexadecimal is &lt;code&gt;0x4b&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Python allows you to write your strings using octal or hexadecimal to
represent the characters. A byte (or 8 bits) of data can be represented by
three digits of octal or two digits of hexadecimal. This is the reason Python
has adopted the standard from C to allow three digit escape sequences of the
sort &lt;code&gt;\ooo&lt;/code&gt; (where &lt;code&gt;o&lt;/code&gt; is a valid octal digit) to represent octal mappings,
and two digit escape sequences of the sort &lt;code&gt;\xhh&lt;/code&gt; (where &lt;code&gt;h&lt;/code&gt; is a valid hex
digit) to represent hex mappings.&lt;/p&gt;&lt;pre&gt;&lt;code&amp;nbsp;class=\&quot;language-python\&quot;&gt;a&amp;nbsp;=&amp;nbsp;&amp;quot;K&amp;quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;this&amp;nbsp;is&amp;nbsp;K&amp;#13;&amp;#10;o&amp;nbsp;=&amp;nbsp;&amp;quot;\113&amp;quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;this&amp;nbsp;is&amp;nbsp;also&amp;nbsp;K&amp;#13;&amp;#10;h&amp;nbsp;=&amp;nbsp;&amp;quot;\x4b&amp;quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;this&amp;nbsp;is&amp;nbsp;also&amp;nbsp;K&amp;#13;&amp;#10;print(a,&amp;nbsp;o,&amp;nbsp;h)&amp;nbsp;&amp;nbsp;#&amp;nbsp;prints&amp;nbsp;&amp;quot;K&amp;nbsp;K&amp;nbsp;K&amp;quot;&amp;#13;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, with a growing web and inclusion of languages across the world and
emoticons, a new character encoding standard called UTF-8 was proposed in
1992. Here, we move from a single byte per character to using between one and
four bytes per character. This is called a Unicode representation of a
character, which is actually backwards compatible with ASCII. Every character
you have ever come across on the Internet is likely to have been encoded with
UTF-8.&lt;/p&gt;&lt;p&gt;The number of characters that can be encoded increased from 2&lt;sup&gt;8&lt;/sup&gt;
(256) in ASCII to 2&lt;sup&gt;21&lt;/sup&gt; (2,097,152) in UTF-8. However, currently
there are only 1,112,064 valid UTF-8 &amp;quot;codepoints&amp;quot;, which each translate to a
different character. This means that the largest valid UTF-8 codepoint is
currently &lt;code&gt;0x10ffff&lt;/code&gt;, though in the future it could be up to &lt;code&gt;0x1fffff&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;As an example, the character &amp;quot;€&amp;quot; has a codepoint of &lt;code&gt;0x20ac&lt;/code&gt;. This codepoint
translates to the hexadecimal bytes &lt;code&gt;0xe2 0x82 0xac&lt;/code&gt;. As this translation from
codepoint to bytes is not straightforward, to understand exactly how Unicode
codepoints translate to their one to four byte representations, you can read
more about the UTF-8 encoding
&lt;a href=&quot;https://en.wikipedia.org/wiki/UTF-8#Encoding&quot;&gt;here&lt;/a&gt;. The UTF-8 encoding is
backwards compatible with ASCII because any character with a UTF-8 codepoint
below &lt;code&gt;0x7f&lt;/code&gt; (128) translates exactly into the same hexadecimal bytes.&lt;/p&gt;&lt;p&gt;In Python, you can include Unicode codepoints in strings using escape
sequences similar to how you can include octal or hexadecimal representations
of characters. To include any Unicode character below the codepoint &lt;code&gt;0xffff&lt;/code&gt;
in a string, you can use escape sequences of the sort &lt;code&gt;\uhhhh&lt;/code&gt; (where &lt;code&gt;h&lt;/code&gt; is
a valid hex digit and &lt;code&gt;hhhh&lt;/code&gt; is a codepoint). To include absolutely any
Unicode character, you can use escape sequences of the sort &lt;code&gt;\Uhhhhhhhh&lt;/code&gt;
instead. Bear in mind however, that even though the &lt;code&gt;\U&lt;/code&gt; escape sequence
expects 8 hexadecimal characters, the largest codepoint that is supported
without throwing an error is &lt;code&gt;\U0010ffff&lt;/code&gt; as explained above.&lt;/p&gt;&lt;p&gt;So, we can expand on our previous representations as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&amp;nbsp;class=\&quot;language-python\&quot;&gt;u&amp;nbsp;=&amp;nbsp;&amp;quot;\u004b&amp;quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;this&amp;nbsp;is&amp;nbsp;also&amp;nbsp;K&amp;#13;&amp;#10;U&amp;nbsp;=&amp;nbsp;&amp;quot;\U0000004b&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;this&amp;nbsp;is&amp;nbsp;also&amp;nbsp;K&amp;#13;&amp;#10;print(u,&amp;nbsp;U)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;prints&amp;nbsp;&amp;quot;K&amp;nbsp;K&amp;quot;&amp;#13;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now based on what we&amp;#x27;ve learned, you may expect that the string
&lt;code&gt;&amp;quot;\xe2\x82\xac&amp;quot;&lt;/code&gt; would convert to &lt;code&gt;&amp;quot;€&amp;quot;&lt;/code&gt; based on the UTF-8 encoding system.
However, this is where things may get confusing because Python deals with
byte representations included in strings on an individual byte basis. It uses
the UTF-8 encoding on a per-byte basis instead of sets of bytes. A reason for
this behavior is because there are encoding formats other than UTF-8, and it
would be incorrect for Python to assume the encoding format of the bytes in
the string. As an example try the following code, and you will see the
unexpected results:&lt;/p&gt;&lt;pre&gt;&lt;code&amp;nbsp;class=\&quot;language-python\&quot;&gt;d&amp;nbsp;=&amp;nbsp;&amp;quot;€&amp;quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;this&amp;nbsp;is&amp;nbsp;a&amp;nbsp;€&amp;#13;&amp;#10;u&amp;nbsp;=&amp;nbsp;&amp;quot;\u20ac&amp;quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;this&amp;nbsp;is&amp;nbsp;also&amp;nbsp;a&amp;nbsp;€&amp;#13;&amp;#10;U&amp;nbsp;=&amp;nbsp;&amp;quot;\U000020ac&amp;quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;this&amp;nbsp;is&amp;nbsp;also&amp;nbsp;a&amp;nbsp;€&amp;#13;&amp;#10;b&amp;nbsp;=&amp;nbsp;&amp;quot;\xe2\x82\xac&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;this&amp;nbsp;is&amp;nbsp;NOT&amp;nbsp;a&amp;nbsp;€,&amp;nbsp;instead&amp;nbsp;is&amp;nbsp;â¬&amp;#13;&amp;#10;print(d,&amp;nbsp;u,&amp;nbsp;U,&amp;nbsp;b)&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;prints&amp;nbsp;&amp;quot;€&amp;nbsp;€&amp;nbsp;€&amp;nbsp;â¬&amp;quot;&amp;#13;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The bytes representation of &amp;quot;€&amp;quot; I mentioned earlier translates to &amp;quot;â¬&amp;quot; instead
based on the individual byte translation pattern. &lt;code&gt;0xe2&lt;/code&gt; maps to &amp;quot;â&amp;quot;, &lt;code&gt;0x82&lt;/code&gt;
is a non-printable character, and &lt;code&gt;0xac&lt;/code&gt; maps to &amp;quot;¬&amp;quot;. I will explain exactly
why this happens in more detail towards the end.&lt;/p&gt;&lt;p&gt;This is where we need to separate the concept of strings from raw bytes in
Python. Before moving forward, I would like to make the difference between
&amp;quot;encoded&amp;quot; and &amp;quot;decoded&amp;quot; clear in terms of Python. In Python, encoding means
converting a string of characters into the raw bytes that it represents based
on an encoding scheme such as UTF-8. Similarly, decoding means converting raw
bytes into a string of characters based on an encoding scheme. But what do
these raw bytes look like?&lt;/p&gt;&lt;p&gt;Raw bytes are stored as something called byte literals. Byte literals
look similar to strings in code, but the characters are instead auto-encoded
into bytes using the UTF-8 encoding scheme on individual characters unless
they are already encoded into bytes. Byte literals are represented using &lt;code&gt;b&amp;quot;&amp;quot;&lt;/code&gt;
or &lt;code&gt;b&amp;#x27;&amp;#x27;&lt;/code&gt;. However, an important thing to note is that byte literals only allow
for characters up to &lt;code&gt;0xff&lt;/code&gt;. This means that Unicode is not supported by byte
literals and the &lt;code&gt;\u&lt;/code&gt; and &lt;code&gt;\U&lt;/code&gt; escapes do not work!(&lt;strong&gt;!!&lt;/strong&gt;).&lt;/p&gt;&lt;pre&gt;&lt;code&amp;nbsp;class=\&quot;language-python\&quot;&gt;d&amp;nbsp;=&amp;nbsp;b&amp;quot;€&amp;quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;does&amp;nbsp;not&amp;nbsp;work,&amp;nbsp;throws&amp;nbsp;an&amp;nbsp;error!&amp;#13;&amp;#10;u&amp;nbsp;=&amp;nbsp;b&amp;quot;\u20ac&amp;quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;works&amp;nbsp;like&amp;nbsp;a&amp;nbsp;&amp;quot;raw&amp;quot;&amp;nbsp;byte&amp;nbsp;literal&amp;nbsp;as&amp;nbsp;\u&amp;nbsp;is&amp;nbsp;unrecognized&amp;#13;&amp;#10;ru&amp;nbsp;=&amp;nbsp;rb&amp;quot;\u20ac&amp;quot;&amp;nbsp;&amp;nbsp;#&amp;nbsp;exactly&amp;nbsp;same&amp;nbsp;as&amp;nbsp;above&amp;#13;&amp;#10;print(u,&amp;nbsp;ru)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;prints&amp;nbsp;&amp;quot;b&amp;#x27;\\u20ac&amp;#x27;&amp;nbsp;b&amp;#x27;\\u20ac&amp;#x27;&amp;quot;&amp;nbsp;denoting&amp;nbsp;byte&amp;nbsp;literals&amp;#13;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Additionally, a string can be newly defined as a set of &lt;strong&gt;individual&lt;/strong&gt; bytes
that are auto-decoded using the UTF-8 encoding scheme unless already decoded.
Notice the use of the word &amp;quot;individual&amp;quot;. This individual byte behavior can be
&amp;quot;escaped&amp;quot; using either &lt;code&gt;\u&lt;/code&gt; or &lt;code&gt;\U&lt;/code&gt; to induce two to four byte behavior and
decode the rarer Unicode characters.&lt;/p&gt;&lt;p&gt;Now, byte literals can be decoded using any encoding format in which they form
a valid sequence of bytes. When the bytes get decoded using an encoding
format, they turn into a string. Similarly, a string can get encoded into byte
literals using any encoding format. So now if we try to print a byte literal
with the byte representation of the &amp;quot;€&amp;quot; character, you will notice it stays
as bytes, until it is encoded using UTF-8.&lt;/p&gt;&lt;pre&gt;&lt;code&amp;nbsp;class=\&quot;language-python\&quot;&gt;b&amp;nbsp;=&amp;nbsp;b&amp;quot;\xe2\x82\xac&amp;quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;this&amp;nbsp;is&amp;nbsp;a&amp;nbsp;bytes&amp;nbsp;literal&amp;nbsp;representing&amp;nbsp;€&amp;nbsp;in&amp;nbsp;UTF-8&amp;#13;&amp;#10;print(type(b),&amp;nbsp;b)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;prints&amp;nbsp;&amp;quot;&amp;lt;class&amp;nbsp;&amp;#x27;bytes&amp;#x27;&amp;gt;&amp;nbsp;b&amp;#x27;\xe2\x82\xac&amp;#x27;&amp;quot;&amp;#13;&amp;#10;d&amp;nbsp;=&amp;nbsp;b.decode(&amp;quot;utf-8&amp;quot;)&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;we&amp;nbsp;decode&amp;nbsp;the&amp;nbsp;byte&amp;nbsp;literal&amp;nbsp;using&amp;nbsp;UTF-8&amp;#13;&amp;#10;print(type(d),&amp;nbsp;d)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;prints&amp;nbsp;&amp;quot;&amp;lt;class&amp;nbsp;&amp;#x27;str&amp;#x27;&amp;gt;&amp;nbsp;€&amp;quot;&amp;#13;&amp;#10;e&amp;nbsp;=&amp;nbsp;d.encode(&amp;quot;utf-8&amp;quot;)&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;we&amp;nbsp;can&amp;nbsp;encode&amp;nbsp;back&amp;nbsp;into&amp;nbsp;byte&amp;nbsp;literal&amp;nbsp;using&amp;nbsp;UTF-8&amp;#13;&amp;#10;print(type(e),&amp;nbsp;e)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;prints&amp;nbsp;&amp;quot;&amp;lt;class&amp;nbsp;&amp;#x27;bytes&amp;#x27;&amp;gt;&amp;nbsp;b&amp;#x27;\xe2\x82\xac&amp;#x27;&amp;quot;&amp;#13;&amp;#10;&amp;#13;&amp;#10;f&amp;nbsp;=&amp;nbsp;b.decode(&amp;quot;utf-16&amp;quot;)&amp;nbsp;&amp;nbsp;#&amp;nbsp;this&amp;nbsp;will&amp;nbsp;error&amp;nbsp;out&amp;#13;&amp;#10;f&amp;nbsp;=&amp;nbsp;d.encode(&amp;quot;ascii&amp;quot;)&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;this&amp;nbsp;will&amp;nbsp;error&amp;nbsp;out&amp;#13;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As we see above, we can freely convert between strings and byte literals
using an encoding format. However, if we try to decode bytes using an
encoding format where the bytes do not form a valid sequence, or if we try to
encode a string into bytes using an encoding format that does not support
the characters of the string, we will see errors.&lt;/p&gt;&lt;p&gt;To end off, as I promised earlier, I will explain why &lt;code&gt;&amp;quot;\xe2\x82\xac&amp;quot;&lt;/code&gt; does
not actually translate to €. There is an important point to note, which is the
difference between byte sequences inside strings and inside byte literals.
Inside byte literals, the byte sequences are exactly what they seem like.
However, inside strings, the bytes actually represent the Unicode characters
below &lt;code&gt;0xff&lt;/code&gt;. If they are non-printable they get displayed as the bytes,
however, if they are printable, we see the actual character. In UTF-8,
characters between &lt;code&gt;0x80&lt;/code&gt; and &lt;code&gt;0xff&lt;/code&gt; need two bytes of information as opposed
to one byte for &lt;code&gt;0x7f&lt;/code&gt; and below (remember ASCII compatibility?). You can see
these principles unfurl:&lt;/p&gt;&lt;pre&gt;&lt;code&amp;nbsp;class=\&quot;language-python\&quot;&gt;s&amp;nbsp;=&amp;nbsp;&amp;quot;\x60&amp;quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;below&amp;nbsp;0x7f&amp;#13;&amp;#10;print(s,&amp;nbsp;s.encode())&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;quot;\x60&amp;quot;&amp;nbsp;==&amp;nbsp;b&amp;quot;\x60&amp;quot;&amp;#13;&amp;#10;u&amp;nbsp;=&amp;nbsp;&amp;quot;\xe0&amp;quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#&amp;nbsp;above&amp;nbsp;0x80&amp;#13;&amp;#10;print(u,&amp;nbsp;u.encode())&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;quot;\xe0&amp;quot;&amp;nbsp;==&amp;nbsp;b&amp;quot;\xc3\xa0&amp;quot;&amp;nbsp;!=&amp;nbsp;b&amp;quot;\xe0&amp;quot;&amp;#13;&amp;#10;b&amp;nbsp;=&amp;nbsp;b&amp;quot;\xe0&amp;quot;.decode()&amp;nbsp;&amp;nbsp;#&amp;nbsp;error,&amp;nbsp;this&amp;nbsp;is&amp;nbsp;actually&amp;nbsp;invalid&amp;nbsp;in&amp;nbsp;UTF-8!&amp;#13;&amp;#10;&amp;#13;&amp;#10;#&amp;nbsp;our&amp;nbsp;old&amp;nbsp;example,&amp;nbsp;now&amp;nbsp;understood&amp;#13;&amp;#10;e&amp;nbsp;=&amp;nbsp;&amp;quot;\xe2\x82\xac&amp;quot;&amp;#13;&amp;#10;print(e,&amp;nbsp;e.encode())&amp;nbsp;&amp;nbsp;#&amp;nbsp;&amp;quot;\xe2\x82\xac&amp;quot;&amp;nbsp;==&amp;nbsp;b&amp;quot;\xc3\xa2\xc2\x82\xc2\xac&amp;quot;&amp;nbsp;!=&amp;nbsp;b&amp;quot;\xe2\x82\xac&amp;quot;&amp;#13;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Overall, I hope this gives some insights into how strings work in Python.
While some concepts are specific to Python, some concepts are much more
generalized over all programming languages. If you want more resources about
strings in Python or UTF-8 in general, you can check these out:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/reference/lexical_analysis.html#literals&quot;&gt;String and Bytes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/UTF-8#Encoding&quot;&gt;UTF-8 Encoding&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/codecs.html#standard-encodings&quot;&gt;Other Encoding Formats&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/codecs.html#text-encodings&quot;&gt;
Other Encoding Formats useful for Pickling and Debugging
&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Generating excerpts using GatsbyJS Markdown plugins]]></title><description><![CDATA[Learn how to generate excerpts with `gatsby-transformer-remark` and work
around the lack of the `excerpt_separator` option in `gatsby-plugin-mdx`.]]></description><link>https://suhasdara.me/blogs/gatsby-mdx-excerpts</link><guid isPermaLink="false">https://suhasdara.me/blogs/gatsby-mdx-excerpts</guid><pubDate>Tue, 31 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Learn how to generate excerpts with &lt;code&gt;gatsby-transformer-remark&lt;/code&gt; and work
around the lack of the &lt;code&gt;excerpt_separator&lt;/code&gt; option in &lt;code&gt;gatsby-plugin-mdx&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;If you have worked with GatsbyJS before, you likely have worked with either
&lt;code&gt;gatsby-transformer-remark&lt;/code&gt;, &lt;code&gt;gatsby-plugin-mdx&lt;/code&gt; or both. When working with
markdown posts in either of these Gatsby plugins, maybe you have wanted to
use excerpts as well.&lt;/p&gt;&lt;h3&gt;The problem&lt;/h3&gt;&lt;p&gt;When using &lt;code&gt;graphql&lt;/code&gt; to query for excerpts in the markdown nodes, it is not
possible to query for varied length excerpts. While it is possible to set a
&lt;code&gt;pruneLength&lt;/code&gt; within the query (as shown below), it is not possible to query
for a varied length excerpt such as the first paragraph of content.&lt;/p&gt;&lt;pre&gt;&lt;code&amp;nbsp;class=\&quot;language-graphql\&quot;&gt;allMarkdownRemark&amp;nbsp;{&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;edges&amp;nbsp;{&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node&amp;nbsp;{&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;excerpt(pruneLength:&amp;nbsp;200)&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;}&amp;#13;&amp;#10;}&amp;#13;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Solve using &lt;code&gt;gatsby-transformer-remark&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;The way this can be tackled with &lt;code&gt;gatsby-transformer-remark&lt;/code&gt; is by using the
&lt;code&gt;excerpt_separator&lt;/code&gt; option in &lt;code&gt;gatsby-config.js&lt;/code&gt;, which allows designating a
specific section of your markdown content as the excerpt. This happens to be
the area between the end of the frontmatter and the start of the actual
content marked by the excerpt separator. Choosing the separator to be of the
format of an HTML comment allows it to demarcate the excerpt while also being
excluded from the content itself (as HTML comments do not get rendered). An
example of a separator is &lt;code&gt;&amp;lt;!--end--&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Now you can format your markdown content as follows...&lt;/p&gt;&lt;pre&gt;&lt;code&amp;nbsp;class=\&quot;language-markdown\&quot;&gt;---&amp;#13;&amp;#10;frontmatter:&amp;nbsp;value&amp;#13;&amp;#10;---&amp;#13;&amp;#10;excerpt&amp;#13;&amp;#10;&amp;lt;!--end--&amp;gt;&amp;#13;&amp;#10;main&amp;nbsp;content&amp;#13;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;...and you can simply query for the excerpt in &lt;code&gt;graphql&lt;/code&gt; without a fixed
&lt;code&gt;pruneLength&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;Solve using &lt;code&gt;gatsby-plugin-mdx&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;However, solving the same problem using &lt;code&gt;gatsby-plugin-mdx&lt;/code&gt; is not as
straightforward as adding an option in &lt;code&gt;gatsby-config.js&lt;/code&gt; unfortunately.
There is no &lt;code&gt;excerpt_separator&lt;/code&gt; option available for this plugin. There have
been Github issues and feature requests for this option, but the
&lt;a href=&quot;https://github.com/gatsbyjs/gatsby/discussions/16865&quot;&gt;thread&lt;/a&gt; has been quite
stale so far with only workarounds being suggested in the comments. You can
either use the workarounds suggested in the thread or stick around for a
different approach.&lt;/p&gt;&lt;p&gt;As mentioned earlier, excerpt is the area between the end of the frontmatter
and the start of the actual content. To emulate the same approach as with
&lt;code&gt;gatsby-transformer-remark&lt;/code&gt;, we can edit the &lt;code&gt;onCreateNode&lt;/code&gt; function in the
&lt;code&gt;gatsby-node.js&lt;/code&gt; file to manually create an excerpt field for the MDX nodes.
You can modify the following code to generate fancier excerpts out of the
content of your Markdown posts. This piece of code uses the &lt;code&gt;end&lt;/code&gt; variable
as the excerpt separator and defaults to a prune length of 200 if the
excerpt separator is not available in the content of the post.&lt;/p&gt;&lt;pre&gt;&lt;code&amp;nbsp;class=\&quot;language-javascript\&quot;&gt;exports.onCreateNode&amp;nbsp;=&amp;nbsp;({&amp;nbsp;node,&amp;nbsp;actions&amp;nbsp;})&amp;nbsp;=&amp;gt;&amp;nbsp;{&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;const&amp;nbsp;{&amp;nbsp;createNodeField&amp;nbsp;}&amp;nbsp;=&amp;nbsp;actions;&amp;#13;&amp;#10;&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;const&amp;nbsp;fm&amp;nbsp;=&amp;nbsp;&amp;quot;---&amp;quot;;&amp;nbsp;//frontmatter&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;const&amp;nbsp;end&amp;nbsp;=&amp;nbsp;&amp;quot;&amp;lt;!--excerpt--&amp;gt;&amp;quot;;&amp;nbsp;//excerpt&amp;nbsp;separator&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;const&amp;nbsp;prune&amp;nbsp;=&amp;nbsp;200;&amp;nbsp;//default&amp;nbsp;prune&amp;nbsp;length&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;if(node.internal.type&amp;nbsp;===&amp;nbsp;`Mdx`)&amp;nbsp;{&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;content&amp;nbsp;=&amp;nbsp;node.internal.content;&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;fmStart&amp;nbsp;=&amp;nbsp;content.indexOf(fm);&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;fmEnd&amp;nbsp;=&amp;nbsp;content.indexOf(fm,&amp;nbsp;fmStart&amp;nbsp;+&amp;nbsp;1)&amp;nbsp;+&amp;nbsp;fm.length;&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;excerptEnd&amp;nbsp;=&amp;nbsp;content.indexOf(end);&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;ellipsis&amp;nbsp;=&amp;nbsp;excerptEnd&amp;nbsp;===&amp;nbsp;-1&amp;nbsp;?&amp;nbsp;&amp;quot;...&amp;quot;&amp;nbsp;:&amp;nbsp;&amp;quot;&amp;quot;;&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;excerptEnd&amp;nbsp;=&amp;nbsp;excerptEnd&amp;nbsp;===&amp;nbsp;-1&amp;nbsp;?&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Math.min(content.length,&amp;nbsp;fmEnd&amp;nbsp;+&amp;nbsp;prune)&amp;nbsp;:&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;excerptEnd;&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;let&amp;nbsp;excerpt&amp;nbsp;=&amp;nbsp;content.substring(fmEnd,&amp;nbsp;excerptEnd)&amp;nbsp;+&amp;nbsp;ellipsis;&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;excerpt&amp;nbsp;=&amp;nbsp;excerpt.trim();&amp;#13;&amp;#10;&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;createNodeField({&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node,&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name:&amp;nbsp;`excerpt`,&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;value:&amp;nbsp;excerpt,&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;}&amp;#13;&amp;#10;};&amp;#13;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The one difference however, is that the &lt;code&gt;excerpt&lt;/code&gt; field will not be available
directly under &lt;code&gt;node&lt;/code&gt; when making a &lt;code&gt;graphql&lt;/code&gt; query. It would instead be
available under &lt;code&gt;fields&lt;/code&gt; as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&amp;nbsp;class=\&quot;language-graphql\&quot;&gt;allMdx&amp;nbsp;{&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;edges&amp;nbsp;{&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node&amp;nbsp;{&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fields&amp;nbsp;{&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;excerpt&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;}&amp;#13;&amp;#10;}&amp;#13;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One drawback of generating excerpts this way is that they are purely text.
There could be scenarios where the excerpts being HTML could be useful.
There is a JavaScript library called
&lt;a href=&quot;https://github.com/showdownjs/showdown&quot;&gt;Showdownjs&lt;/a&gt;, which can solve this
exact problem. Adding the following few additional lines of code to
&lt;code&gt;onCreateNode&lt;/code&gt; can generate an extra field that has the excerpt available as
HTML.&lt;/p&gt;&lt;pre&gt;&lt;code&amp;nbsp;class=\&quot;language-javascript\&quot;&gt;const&amp;nbsp;showdown&amp;nbsp;=&amp;nbsp;require(&amp;quot;showdown&amp;quot;);&amp;#13;&amp;#10;let&amp;nbsp;converter&amp;nbsp;=&amp;nbsp;new&amp;nbsp;showdown.Converter();&amp;#13;&amp;#10;let&amp;nbsp;excerpt_html&amp;nbsp;=&amp;nbsp;converter.makeHtml(excerpt);&amp;#13;&amp;#10;createNodeField({&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;node,&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;name:&amp;nbsp;`excerpt_html`,&amp;#13;&amp;#10;&amp;nbsp;&amp;nbsp;value:&amp;nbsp;excerpt_html,&amp;#13;&amp;#10;});&amp;#13;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With that, you should have fully functioning excerpts, whether text or HTML,
available through &lt;code&gt;graphql&lt;/code&gt; queries in the component of your choice.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[FedEx + Customs = Nightmare]]></title><description><![CDATA[While being situated in Pune, India, I recently did a remote internship with
a New York-based company. They shipped me a laptop and peripheral devices via
FedEx and what followed was a nightmare.]]></description><link>https://suhasdara.me/blogs/fedex-nightmare</link><guid isPermaLink="false">https://suhasdara.me/blogs/fedex-nightmare</guid><pubDate>Sat, 21 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;While being situated in Pune, India, I recently did a remote internship with
a New York-based company. They shipped me a laptop and peripheral devices via
FedEx and what followed was a nightmare.&lt;/p&gt;&lt;p&gt;I had been in India since December last year and completed my last semester
of studies remotely. When the company let me know that I can do my internship
from India, I was excited. As was with my previous remote internship last
year, the company shipped the equipment to the interns&amp;#x27; remote locations.
While for the majority of interns that would be within the US, it turned out
to be quite a big problem for me being outside the US.&lt;/p&gt;&lt;p&gt;A few days before my internship was to start, I received an email from FedEx
that asked for documents to allow the entry of the shipment into the country.
Before I received the email, I hadn&amp;#x27;t considered that the shipment would be
of quite a high value and that it would need to be cleared by customs. And
so the 6-week saga begins.&lt;/p&gt;&lt;p&gt;The email listed some documents that I was not familiar with at all. While
I was asked for the usual Indian identification documents, I was also asked
for something called an Import Export Code (IEC), a Bank Authorised Dealer
code (Bank AD code), and some authorization forms to be filled by the
company. It hadn&amp;#x27;t occurred to me yet that FedEx was considering this as a
business import! In a sense it may appear to be true, but it was not,
because the company does not have a branch in India.&lt;/p&gt;&lt;p&gt;I ask them to call me so that I can clarify the specifics of my situation,
namely that I am not buying anything, and I am handling the shipment as an
individual without any financial transaction involved. The lady who called me
assured me that the situation can be resolved if I supply a letter from the
company indicating everything I had just said. I said I could send that by
the next day, considering the fact that going forward anything that FedEx
asks for can only be supplied the next working day (because of a timezone
difference with New York). The company&amp;#x27;s HR and Recruiting were &lt;strong&gt;really&lt;/strong&gt;
helpful throughout the process, and they immediately provided me with a
letter that I then forwarded to FedEx.&lt;/p&gt;&lt;p&gt;I thought that was going to be it, but then entered a new customer support
person (one of the most incompetent people I&amp;#x27;ve ever interacted with as
you&amp;#x27;ll see), and SunImpex, a mediator between FedEx and customs for
high value shipments. The FedEx customer support person kept asking for the
IEC and Bank AD code countless number of times even after explaining the
situation thoroughly. This person did not understand until after a phone call
and explaining everything once more.&lt;/p&gt;&lt;p&gt;Meanwhile, a SunImpex representative began the process of creating a Bill of
Entry (BoE) document for the shipment which listed a customs duty of over 70%
of the actual value itself! While I was shocked about that duty amount,
the company was ready to pay any amount to get the shipment cleared. Still,
things were unfortunately destined to go downhill.&lt;/p&gt;&lt;p&gt;Apparently, customs (or may be SunImpex, we will never know) wasn&amp;#x27;t just
satisfied with the company becoming ready to pay the customs duties and asked
for proof of value documents (namely purchase order copies for each item in
the shipment or bank remittance copies for each item), and also a &lt;em&gt;&amp;quot;technical
write-up&amp;quot;&lt;/em&gt;, which is basically a good description of the items in the
shipment. I was extremely stressed at this point as my internship was to
start in just two days, and I didn&amp;#x27;t know what to do. I wasn&amp;#x27;t expecting the
shipment to get cleared or the company to be able to provide the requested
documents. But, the company HR did provide the purchase order documents...
the catch being, all the orders were bulk (duh). They also gave me a company
letterhead so that I could create any&lt;em&gt;&amp;quot;technical&amp;quot;&lt;/em&gt; documents that
FedEx/customs was going to ask further.&lt;/p&gt;&lt;p&gt;Soon, my internship began without any of the equipment reaching me. The
company&amp;#x27;s tech support was really helpful and set up VPN login through my
personal laptop for as long as required. The process was painful each day
as I had to log in with special token codes that sometimes randomly expired,
and I also had to face a &lt;strong&gt;LOT&lt;/strong&gt; of latency because of connecting to a
Chicago VM through a Tokyo VM (yeah, double latency).&lt;/p&gt;&lt;p&gt;Anyways, on the FedEx/SunImpex/customs front, I had a whole week of radio
silence. Finally, they responded with an aggravating message. Remember, how
they asked me to either submit purchase orders &lt;strong&gt;OR&lt;/strong&gt; bank remittances?
Well, now they want both. The company was nice enough to provide me these as
well, although I was expecting their patience also to run out by this point.
However, according to SunImpex, customs was still not satisfied with these
and wanted the Manufacturer&amp;#x27;s price lists (what??). To their credit, not all
the purchase orders and bank remittances matched up, and they were bulk
as well, but come on, how long did they plan on torturing their customer?&lt;/p&gt;&lt;p&gt;Well, this was the limit. The company did not have any way of getting
manufacturer&amp;#x27;s price lists, and SunImpex was not satisfied with the
listings on the manufacturer&amp;#x27;s website. I tried going the Twitter route
(as it worked for my cousin before), and also tried calling customer
service, both to no avail. SunImpex was stuck on manufacturer&amp;#x27;s price lists
like a broken record while the FedEx customer support person was of no use
and just stopped responding to my emails.&lt;/p&gt;&lt;p&gt;After a few days, the FedEx customer support person just told me to visit
customs and explain in person. I would literally have to travel from Pune to
Mumbai (3.5 hour drive) for explaining the exact same thing that I have been
trying to tell them since the start. They refused to give any contact
information of the customs official, or at least the customs department
itself, stating they were unauthorized to provide that information. I tried
scourging the Internet for this information, but as with every other Indian
government agency, no phone number worked. The FedEx customer support person
gave me the address of the place I had to visit, and this would be the last
straw.&lt;/p&gt;&lt;p&gt;Both HR and my manager at the company did not want me to travel during these
COVID times just to get a shipment cleared, but I was tired of dealing with
FedEx over email and also dealing with the double latency during work hours
every day. The shipment was just sitting in Mumbai for 4 weeks since it
arrived in India, waiting for clearance. At the end of week 3 of my
internship, my dad drove me to Mumbai to the customs location. My morale was
low, and this was a desperate attempt at getting something accomplished with
FedEx.&lt;/p&gt;&lt;p&gt;Turns out we need a pass per person just to get inside the building. We tried
getting passes from an office that was a 7-8 minute walk away, but the person
stamping the passes wanted a letter from SunImpex, who, admittedly because of
me not informing them of my travel, did not provide me with any letter. Right
from there I tried contacting them as well as FedEx, but to no avail. It was
the middle of monsoon, was raining on and off all day, and we were waiting
outside the building under an umbrella hoping to run into some higher level
authority. We got lucky and ran into some FedEx official. He sympathized with
our situation and got us a document to show to the pass-issuing person. We
finally got passes to enter the building after walking back and forth between
the two buildings a couple of times in the rain.&lt;/p&gt;&lt;p&gt;We met with a SunImpex person inside who said he would get us in contact with
the customs official. Great! After a long wait, when we finally met the
customs official, he understood our situation immediately and asked us why
we traveled all the way from Pune! We pointed out that the FedEx and
SunImpex people were pretty much incompetent in handling any case that is
slightly different from the usual. Anyways, the official just asked for
a signed letter from me indicating the remote internship and situation, and
assured that the shipment would get cleared by the end of the day.&lt;/p&gt;&lt;p&gt;With that assurance, we drove back to Pune losing the whole day. I was
actually surprised when the shipment was cleared the next morning itself. I
really was not expecting anything to happen. A couple of days later, I
received my equipment. One surprise was that the huge customs duty that I was
expecting to pay to the delivery guy was seemingly waived-off by the customs
official!&lt;/p&gt;&lt;p&gt;Sadly, that was the only good part... The end of the ordeal was not to be
seen yet. I received my equipment in a flimsy cardboard box among a bunch of
packing peanuts. This definitely could &lt;strong&gt;NOT&lt;/strong&gt; be the box that the equipment
was shipped in as I&amp;#x27;ve never seen such a shoddy job done by FedEx in the US.
Turns out the equipment was opened and inspected by customs. From the
company&amp;#x27;s perspective, that is considered tampering. The company is very
particular about their security practices. When I informed them that
the laptop charger was missing and the laptop&amp;#x27;s
&lt;a href=&quot;https://en.wikipedia.org/wiki/Security_bag&quot;&gt;tamper evidence bag&lt;/a&gt; was
already opened, they told me I couldn&amp;#x27;t use the laptop. Four and a half
weeks of effort just gone, &lt;strong&gt;poof&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;However, the company was dead set on delivering a laptop to me for a good
internship experience. They sent a new shipment within the next two days. At
that moment, I was more distressed about dealing with FedEx again than happy
about them sending another laptop to improve my experience. Luckily(?), this
time a different FedEx representative contacted me even before the shipment
entered India instead of the incompetent person from last time. After
explaining the whole situation over a long phone call, he assured smooth
processing this time around.&lt;/p&gt;&lt;p&gt;Shockingly, I was contacted by SunImpex once again asking the same documents
as before (IEC, Bank AD code etc.). I was annoyed at this point; I bombarded
them with every single document that I had provided the last time, and I sent
a new letter addressing the customs official requesting him to clear this
shipment as the previous shipment could not be used because of their deeds.
At this point they didn&amp;#x27;t contact me further, and thankfully the shipment
was cleared without any further trouble. I was dreading the day I
had to open the shipment to make sure it was not tampered with again...&lt;/p&gt;&lt;p&gt;I finally received the shipment at the end of week 5 of my internship.
Customs apparently once again waived-off the duties, and this time the
shipment came in what seemed to be its original packaging. This time the
laptop&amp;#x27;s tamper evidence bag was not torn, which meant I could finally use
the laptop (&lt;strong&gt;&lt;em&gt;Tired Hurray!&lt;/em&gt;&lt;/strong&gt;)&lt;/p&gt;&lt;p&gt;I really have to thank the company&amp;#x27;s HR for putting up with this whole ordeal
till the end and being supportive throughout the process. In all of this,
there was something still looming... I had to ship the two laptops back to
the company at the end of my internship, through FedEx.&lt;/p&gt;&lt;p&gt;When my internship ended after the 10th week, I visited a local FedEx. After
talking with them, I basically figured out that in an individual capacity, it
is impossible to ship the laptops out of India through any courier service.
This is because the value of each item is more than 25,000INR (roughly
340USD), and stringent Indian Government export rules prohibit that. So, I am
stuck with the laptops for now, which honestly, is the best outcome I
suppose... I don&amp;#x27;t have to deal with FedEx and customs again. I have to find
a way to send them back to the US, likely taking them with me when I plan on
traveling back.&lt;/p&gt;&lt;p&gt;I probably will never use FedEx for international shipping to India in my
life after this nightmare...&lt;/p&gt;</content:encoded></item></channel></rss>