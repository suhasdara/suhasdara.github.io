{
    "componentChunkName": "component---src-templates-blog-temp-js",
    "path": "/blogs/gatsby-mdx-excerpts",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Generating excerpts using GatsbyJS Markdown plugins\",\n  \"date\": \"2021-08-31T00:00:00.000Z\",\n  \"slug\": \"/blogs/gatsby-mdx-excerpts\",\n  \"tags\": [\"tech\"],\n  \"postType\": \"blog\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Learn how to generate excerpts with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-transformer-remark\"), \" and work\\naround the lack of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"excerpt_separator\"), \" option in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-plugin-mdx\"), \".\"), mdx(\"p\", null, \"If you have worked with GatsbyJS before, you likely have worked with either\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-transformer-remark\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-plugin-mdx\"), \" or both. When working with\\nmarkdown posts in either of these Gatsby plugins, maybe you have wanted to\\nuse excerpts as well.\"), mdx(\"h3\", null, \"The problem\"), mdx(\"p\", null, \"When using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"graphql\"), \" to query for excerpts in the markdown nodes, it is not\\npossible to query for varied length excerpts. While it is possible to set a\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pruneLength\"), \" within the query (as shown below), it is not possible to query\\nfor a varied length excerpt such as the first paragraph of content.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"allMarkdownRemark {\\n  edges {\\n    node {\\n      excerpt(pruneLength: 200)\\n    }\\n  }\\n}\\n\")), mdx(\"h3\", null, \"Solve using \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"gatsby-transformer-remark\")), mdx(\"p\", null, \"The way this can be tackled with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-transformer-remark\"), \" is by using the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"excerpt_separator\"), \" option in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \", which allows designating a\\nspecific section of your markdown content as the excerpt. This happens to be\\nthe area between the end of the frontmatter and the start of the actual\\ncontent marked by the excerpt separator. Choosing the separator to be of the\\nformat of an HTML comment allows it to demarcate the excerpt while also being\\nexcluded from the content itself (as HTML comments do not get rendered). An\\nexample of a separator is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<!--end-->\"), \".\"), mdx(\"p\", null, \"Now you can format your markdown content as follows...\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-markdown\"\n  }, \"---\\nfrontmatter: value\\n---\\nexcerpt\\n<!--end-->\\nmain content\\n\")), mdx(\"p\", null, \"...and you can simply query for the excerpt in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"graphql\"), \" without a fixed\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pruneLength\"), \".\"), mdx(\"h3\", null, \"Solve using \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"gatsby-plugin-mdx\")), mdx(\"p\", null, \"However, solving the same problem using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-plugin-mdx\"), \" is not as\\nstraightforward as adding an option in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \" unfortunately.\\nThere is no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"excerpt_separator\"), \" option available for this plugin. There have\\nbeen Github issues and feature requests for this option, but the\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/gatsbyjs/gatsby/discussions/16865\"\n  }, \"thread\"), \" has been quite\\nstale so far with only workarounds being suggested in the comments. You can\\neither use the workarounds suggested in the thread or stick around for a\\ndifferent approach.\"), mdx(\"p\", null, \"As mentioned earlier, excerpt is the area between the end of the frontmatter\\nand the start of the actual content. To emulate the same approach as with\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-transformer-remark\"), \", we can edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onCreateNode\"), \" function in the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \" file to manually create an excerpt field for the MDX nodes.\\nYou can modify the following code to generate fancier excerpts out of the\\ncontent of your Markdown posts. This piece of code uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end\"), \" variable\\nas the excerpt separator and defaults to a prune length of 200 if the\\nexcerpt separator is not available in the content of the post.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"exports.onCreateNode = ({ node, actions }) => {\\n  const { createNodeField } = actions;\\n\\n  const fm = \\\"---\\\"; //frontmatter\\n  const end = \\\"<!--excerpt-->\\\"; //excerpt separator\\n  const prune = 200; //default prune length\\n  if(node.internal.type === `Mdx`) {\\n    let content = node.internal.content;\\n    let fmStart = content.indexOf(fm);\\n    let fmEnd = content.indexOf(fm, fmStart + 1) + fm.length;\\n    let excerptEnd = content.indexOf(end);\\n    let ellipsis = excerptEnd === -1 ? \\\"...\\\" : \\\"\\\";\\n    excerptEnd = excerptEnd === -1 ?\\n      Math.min(content.length, fmEnd + prune) :\\n      excerptEnd;\\n    let excerpt = content.substring(fmEnd, excerptEnd) + ellipsis;\\n    excerpt = excerpt.trim();\\n\\n    createNodeField({\\n      node,\\n      name: `excerpt`,\\n      value: excerpt,\\n    });\\n  }\\n};\\n\")), mdx(\"p\", null, \"The one difference however, is that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"excerpt\"), \" field will not be available\\ndirectly under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node\"), \" when making a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"graphql\"), \" query. It would instead be\\navailable under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fields\"), \" as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"allMdx {\\n  edges {\\n    node {\\n      fields {\\n        excerpt            \\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"One drawback of generating excerpts this way is that they are purely text.\\nThere could be scenarios where the excerpts being HTML could be useful.\\nThere is a JavaScript library called\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/showdownjs/showdown\"\n  }, \"Showdownjs\"), \", which can solve this\\nexact problem. Adding the following few additional lines of code to\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onCreateNode\"), \" can generate an extra field that has the excerpt available as\\nHTML.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const showdown = require(\\\"showdown\\\");\\nlet converter = new showdown.Converter();\\nlet excerpt_html = converter.makeHtml(excerpt);\\ncreateNodeField({\\n  node,\\n  name: `excerpt_html`,\\n  value: excerpt_html,\\n});\\n\")), mdx(\"p\", null, \"With that, you should have fully functioning excerpts, whether text or HTML,\\navailable through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"graphql\"), \" queries in the component of your choice.\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":2,"fields":{"excerpt":"Learn how to generate excerpts with `gatsby-transformer-remark` and work\naround the lack of the `excerpt_separator` option in `gatsby-plugin-mdx`.","miscTimeToRead":7},"frontmatter":{"title":"Generating excerpts using GatsbyJS Markdown plugins","date":"2021-08-31T00:00:00.000Z","tags":["tech"],"slug":"/blogs/gatsby-mdx-excerpts"}}},"pageContext":{}},
    "staticQueryHashes": ["63159454"]}