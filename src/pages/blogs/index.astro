---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { Rss } from 'lucide-astro';

import { sortByDate } from '../../utils/dateUtils';

const blogs = await getCollection('blogs');
const sortedBlogs = sortByDate(blogs);

// Get all unique tags for filtering
const allTags = [...new Set(blogs.flatMap(blog => blog.data.tags))].sort();

// Helper function to extract excerpt from markdown content
const getExcerpt = (blog: any) => {
  const { body } = blog;
  const excerptMatch = body.split('<!--excerpt-->')[0];
  return excerptMatch.trim() || '';
};

import { formatBlogDate as formatDate } from '../../utils/dateUtils';
---

<BaseLayout title="Blogs - Suhas Dara">
  <div>
    <div class="mb-8">
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-4xl font-bold text-green-300 font-mono">
          <span class="text-green-600">$</span> ls ~/blogs
        </h1>
        <a 
          href="/rss.xml" 
          target="_blank"
          class="flex items-center gap-2 bg-green-600/20 border border-green-600/40 hover:bg-green-600/30 text-green-300 hover:text-green-400 px-4 py-2 rounded font-mono text-sm transition-colors"
          title="Subscribe to RSS feed"
        >
          <Rss size={16} />
          RSS Feed
        </a>
      </div>
      
      <!-- Filter Tags -->
      <div class="mb-6">
        <div class="text-green-300 font-mono text-sm mb-3">Filter by tag:</div>
        <div class="flex flex-wrap gap-2">
          <button 
            class="filter-btn bg-green-600/20 border border-green-600/40 text-green-300 px-3 py-1 rounded text-sm font-mono transition-colors active hover:bg-green-600/30"
            data-filter="all"
          >
            All Posts
          </button>
          {allTags.map((tag) => (
            <button 
              class="filter-btn bg-gray-700/50 border border-gray-600 hover:border-green-600/40 text-green-200 hover:text-green-300 px-3 py-1 rounded text-sm font-mono transition-colors hover:bg-green-600/10"
              data-filter={tag}
            >
              #{tag}
            </button>
          ))}
        </div>
      </div>
    </div>
    
    <div class="space-y-6" id="blog-grid">
      {sortedBlogs.map((blog) => {
        const excerpt = getExcerpt(blog);
        return (
          <article 
            class="blog-post bg-gray-900 border border-green-600/30 rounded-lg overflow-hidden hover:bg-gray-800 hover:border-green-500/50 transition-colors cursor-pointer"
            onclick={`window.location.href='/blogs/${blog.data.slug || blog.slug}'`}
            data-tags={blog.data.tags.join(',')}
          >
            <div class="p-6">
              <div class="flex justify-between items-start mb-4">
                <div class="flex-1">
                  <h2 class="text-xl font-bold mb-2 font-mono">
                    <a href={`/blogs/${blog.data.slug || blog.slug}`} class="text-blue-400 hover:text-blue-300 transition-colors font-semibold">
                      {blog.data.title}
                    </a>
                  </h2>
                  <time class="text-green-600 font-mono text-sm">{formatDate(blog.data.date.toISOString().split('T')[0])}</time>
                </div>
                
                <div class="flex flex-wrap gap-2 ml-4">
                  {blog.data.tags.map((tag) => (
                    <span class="bg-green-600/20 text-green-300 border border-green-600/40 px-2 py-1 rounded text-xs font-mono">#{tag}</span>
                  ))}
                </div>
              </div>
              
              {excerpt && (
                <div class="mb-4">
                  <div class="text-green-600 font-mono text-xs mb-2"># Preview:</div>
                  <div class="bg-black/30 border-l-2 border-green-600/50 pl-4 py-2">
                    <p class="text-green-200 text-sm leading-relaxed line-clamp-3">
                      {excerpt}
                    </p>
                  </div>
                </div>
              )}
              
              <div class="border-t border-green-600/20 pt-3">
                <a href={`/blogs/${blog.data.slug || blog.slug}`} class="text-blue-400 hover:text-blue-300 text-sm font-mono transition-colors font-medium">
                  Read more â†’
                </a>
              </div>
            </div>
          </article>
        );
      })}
    </div>
    
    <!-- No results message -->
    <div id="no-results" class="hidden text-center py-8">
      <p class="text-green-300 font-mono">No blog posts found with the selected tag.</p>
    </div>
  </div>

  <script>
    function initBlogFilter() {
      const filterButtons = document.querySelectorAll('.filter-btn');
      const blogPosts = document.querySelectorAll('.blog-post');
      const noResults = document.getElementById('no-results');
      
      filterButtons.forEach(button => {
        button.addEventListener('click', () => {
          const filter = button.getAttribute('data-filter');
          
          // Update active button
          filterButtons.forEach(btn => {
            btn.classList.remove('active', 'bg-blue-600', 'text-white');
            btn.classList.add('bg-gray-700', 'text-gray-300', 'hover:bg-gray-600', 'hover:text-white');
          });
          
          button.classList.add('active', 'bg-blue-600', 'text-white');
          button.classList.remove('bg-gray-700', 'text-gray-300', 'hover:bg-gray-600', 'hover:text-white');
          
          // Filter posts
          let visibleCount = 0;
          
          blogPosts.forEach(post => {
            const postElement = post as HTMLElement;
            const postTags = postElement.getAttribute('data-tags')?.split(',') || [];
            
            if (filter === 'all' || (filter && postTags.includes(filter))) {
              postElement.style.display = 'block';
              visibleCount++;
            } else {
              postElement.style.display = 'none';
            }
          });
          
          // Show/hide no results message
          if (visibleCount === 0) {
            noResults?.classList.remove('hidden');
          } else {
            noResults?.classList.add('hidden');
          }
        });
      });
    }
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', initBlogFilter);
    
    // Also run after navigation (for SPA-like behavior)
    document.addEventListener('astro:page-load', initBlogFilter);
  </script>
</BaseLayout>