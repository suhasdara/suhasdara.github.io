---
import { getCollection } from 'astro:content';
import { Download, Linkedin, Github, Instagram, Rss } from 'lucide-astro';

const projects = await getCollection('projects');
const experience = await getCollection('experience');

// Sort projects by most recent first (assuming startDates[0] exists)
const sortedProjects = projects.sort((a, b) => {
  const aDate = a.data.startDates?.[0] ? new Date(a.data.startDates[0]) : new Date(0);
  const bDate = b.data.startDates?.[0] ? new Date(b.data.startDates[0]) : new Date(0);
  return bDate.getTime() - aDate.getTime();
});

// Sort experience by most recent first
const sortedExperience = experience.sort((a, b) => {
  const aDate = new Date(a.data.startDates[0]);
  const bDate = new Date(b.data.startDates[0]);
  return bDate.getTime() - aDate.getTime();
});

// Combine projects and experiences, then sort by start date
const allItems = [
  ...projects.map(p => ({
    type: 'project',
    startDate: p.data.startDates?.[0] ? new Date(p.data.startDates[0]) : new Date(0),
    languages: p.data.languages
  })),
  ...experience.map(e => ({
    type: 'experience', 
    startDate: new Date(e.data.startDates[0]),
    languages: e.data.languages
  }))
].sort((a, b) => b.startDate.getTime() - a.startDate.getTime());

// Get languages from the 5 most recent items (projects + experiences combined)
const allRecentLanguages = allItems.slice(0, 5).flatMap(item => item.languages);

// Count frequency and sort by most used, then take top 5
const languageCount: Record<string, number> = {};
allRecentLanguages.forEach(lang => {
  languageCount[lang] = (languageCount[lang] || 0) + 1;
});

const recentLanguages = Object.entries(languageCount)
  .sort(([,a], [,b]) => (b as number) - (a as number))
  .map(([lang]) => lang)
  .slice(0, 5);

// Check if currently working (latest experience has no end date, future date, or very recent end date)
const currentPosition = sortedExperience[0];
const isCurrentlyWorking = currentPosition && (
  !currentPosition.data.endDates[0] || 
  currentPosition.data.endDates[0] === '2099-12-31' ||
  new Date(currentPosition.data.endDates[0]) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // Within last 30 days
);

// Create terminal data structure for commands
const terminalData = {
  projects: sortedProjects.map(p => {
    // Use today's date if end date is 2099-12-31 (current project) or if no end date
    const endDateRaw = p.data.endDates?.[0];
    let displayDate;
    
    if (!endDateRaw) {
      // No end date, use today
      displayDate = new Date();
    } else {
      // Parse the date string (YYYY-MM-DD format) - treat as UTC to avoid timezone shifts
      const endDate = new Date(endDateRaw + 'T00:00:00Z');
      const isCurrentProject = endDate.getFullYear() === 2099;
      displayDate = isCurrentProject ? new Date() : endDate;
    }
    
    return {
      name: p.data.slug || p.slug,
      title: p.data.title,
      languages: p.data.languages,
      endDate: displayDate,
      formattedDate: displayDate.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric',
        timeZone: 'UTC'
      })
    };
  }),
  languages: recentLanguages,
  totalProjects: projects.length,
  currentPosition: isCurrentlyWorking ? {
    title: currentPosition.data.title,
    company: currentPosition.data.company
  } : null
};
---

<div class="terminal-container bg-gray-900 rounded-lg shadow-2xl overflow-hidden max-w-4xl mx-auto">
  <!-- Terminal Header -->
  <div class="terminal-header bg-gray-800 px-4 py-3 flex items-center gap-2">
    <div class="flex gap-2">
      <div class="w-3 h-3 bg-red-500 rounded-full"></div>
      <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
      <div class="w-3 h-3 bg-green-500 rounded-full"></div>
    </div>
    <div class="ml-4 text-gray-400 text-sm font-mono">suhas@portfolio:~$</div>
  </div>
  
  <!-- Terminal Body -->
  <div class="terminal-body bg-black p-6 font-mono text-sm min-h-[600px] md:min-h-[500px]">
    <div id="terminal-output" class="space-y-2"></div>
    <div class="terminal-input flex items-center flex-wrap mt-2">
      <span class="text-green-400 mr-2 flex-shrink-0">suhas@portfolio:~$</span>
      <span id="cursor" class="bg-green-400 w-2 h-5 inline-block animate-pulse"></span>
    </div>
  </div>
  
  <!-- Action Buttons (Always visible) -->
  <div id="action-buttons" class="bg-gray-800 px-6 py-4 border-t border-gray-700">
    <div class="flex flex-wrap gap-4 justify-center">
      <a 
        href="/static/suhasdara_resume.pdf" 
        target="_blank"
        class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm font-medium transition-colors flex items-center gap-2"
      >
        <Download size={16} />
        Resume
      </a>
      
      <a 
        href="/rss.xml" 
        target="_blank"
        class="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded text-sm font-medium transition-colors flex items-center gap-2"
      >
        <Rss size={16} />
        RSS
      </a>
      
      <a 
        href="https://www.linkedin.com/in/suhas-dara" 
        target="_blank" 
        rel="noopener noreferrer"
        class="bg-blue-800 hover:bg-blue-900 text-white px-4 py-2 rounded text-sm font-medium transition-colors flex items-center gap-2"
      >
        <Linkedin size={16} />
        LinkedIn
      </a>
      
      <a 
        href="https://www.github.com/suhasdara" 
        target="_blank" 
        rel="noopener noreferrer"
        class="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded text-sm font-medium transition-colors flex items-center gap-2"
      >
        <Github size={16} />
        GitHub
      </a>
      
      <a 
        href="https://www.instagram.com/living_bot" 
        target="_blank" 
        rel="noopener noreferrer"
        class="bg-pink-600 hover:bg-pink-700 text-white px-4 py-2 rounded text-sm font-medium transition-colors flex items-center gap-2"
      >
        <Instagram size={16} />
        Instagram
      </a>
    </div>
  </div>
</div>

<script is:inline define:vars={{ terminalData }}>
  // Note: TypeScript warnings about 'terminalData' are expected here
  // terminalData is provided by Astro's define:vars and is available at runtime
  class Terminal {
    constructor(data) {
      this.data = data;
      this.output = document.getElementById('terminal-output');
      this.cursor = document.getElementById('cursor');
      
      this.commands = [];
      
      // Always start with whoami
      this.commands.push({
        command: 'whoami',
        output: [
          'Suhas Dara',
          'MS ECE Research Student passionate to make a change',
          ''
        ]
      });
      
      // Show current position early if working
      if (this.data.currentPosition) {
        this.commands.push({
          command: 'cat ~/current_position.txt',
          output: [
            `Currently: ${this.data.currentPosition.title}`,
            `Company: ${this.data.currentPosition.company}`,
            ''
          ]
        });
      }
      
      
      this.commands.push({
        command: 'cat ~/about.txt',
        output: [
          'Location: West Lafayette, IN', 
          'Education: Purdue 2027 MS in ECE, UT Austin 2021 BS in CS',
          'Focus: Signal Processing, Deep Learning, Data',
          'Status: Open to new opportunities',
          ''
        ]
      });
      
      this.commands.push({
        command: 'grep -r "languages" ~/skills/ | head -5',
        output: this.data.languages.map(lang => `~/skills/stack.conf:    ${lang}`).concat(
          this.data.languages.length >= 5 ? ['~/skills/stack.conf:    ... and more technologies'] : []
        ).concat([''])
      });
      
      this.commands.push({
        command: 'find ~/projects -name "*.md" -type f | wc -l',
        output: [
          `${this.data.totalProjects}`,
          ''
        ]
      });
      
      this.commands.push({
        command: 'ls -la ~/projects/',
        output: [
          `total ${this.data.totalProjects}`,
          'drwxr-xr-x 2 suhas suhas 4096 Jan 17 00:59 .',
          'drwxr-xr-x 8 suhas suhas 4096 Jan 17 00:59 ..',
          ...this.data.projects.slice(0, 4).map(p => {
            return `drwxr-xr-x 3 suhas suhas 4096 ${p.formattedDate} 14:22 ${p.name}/`;
          }),
          this.data.totalProjects > 4 ? `... ${this.data.totalProjects - 4} more directories` : '',
          ''
        ].filter(Boolean)
      });
      
      this.commands.push({
        command: 'echo "Welcome! Explore the portfolio above ðŸš€"',
        output: [
          'Welcome! Explore the portfolio above ðŸš€',
          ''
        ]
      });
      
      this.init();
    }
    
    async init() {
      await this.sleep(500);
      await this.runCommands();
      this.hideCursor();
    }
    
    async runCommands() {
      for (let i = 0; i < this.commands.length; i++) {
        // Show blinking cursor for a random time before each command
        await this.showThinkingCursor();
        await this.executeCommand(this.commands[i]);
        
        // Wait before starting next command (only if not the last command)
        if (i < this.commands.length - 1) {
          const randomDelay = 1000 + Math.random() * 2000;
          await this.sleep(randomDelay);
        }
      }
    }
    
    async executeCommand(cmdObj) {
      // Type the command
      await this.typeCommand(cmdObj.command);
      await this.sleep(200);
      
      // Show output
      this.showOutput(cmdObj.output);
      await this.sleep(300);
    }
    
    async showThinkingCursor() {
      // Show blinking cursor for 0.5-2 seconds before typing
      const thinkTime = 500 + Math.random() * 1500;
      
      // Create a temporary cursor line that will be reused
      this.currentCommandLine = document.createElement('div');
      this.currentCommandLine.className = 'command-line text-white';
      this.currentCommandLine.innerHTML = `<span class="text-green-400">suhas@portfolio:~$</span> <span class="thinking-cursor bg-green-400 w-2 h-5 inline-block animate-pulse"></span>`;
      this.output.appendChild(this.currentCommandLine);
      
      await this.sleep(thinkTime);
      
      // Don't remove the line, just prepare it for command typing
      this.currentCommandLine.className = 'command-line text-white';
      this.currentCommandLine.innerHTML = `<span class="text-green-400">suhas@portfolio:~$</span> <span class="command-text"></span>`;
    }
    
    async typeCommand(command) {
      // Use the existing command line from showThinkingCursor or create new one
      const line = this.currentCommandLine || this.createCommandLine();
      const commandSpan = line.querySelector('.command-text');
      
      for (let i = 0; i < command.length; i++) {
        commandSpan.textContent = command.substring(0, i + 1);
        await this.sleep(20 + Math.random() * 40);
      }
      
      // Clear the reference since we're done with this line
      this.currentCommandLine = null;
    }
    
    createCommandLine() {
      const line = document.createElement('div');
      line.className = 'command-line text-white';
      line.innerHTML = `<span class="text-green-400">suhas@portfolio:~$</span> <span class="command-text"></span>`;
      this.output.appendChild(line);
      return line;
    }
    
    showOutput(outputLines) {
      outputLines.forEach(line => {
        const outputLine = document.createElement('div');
        outputLine.className = 'text-gray-300 ml-4';
        
        // Add syntax highlighting for certain patterns
        if (line.includes('â€¢')) {
          outputLine.innerHTML = line.replace(/â€¢ (\w+)/g, 'â€¢ <span class="text-blue-400">$1</span>');
        } else if (line.includes('#')) {
          const parts = line.split('#');
          outputLine.innerHTML = `${parts[0]}<span class="text-gray-500"># ${parts[1]}</span>`;
        } else if (line.includes('drwxr-xr-x') || line.includes('-rw-r--r--')) {
          outputLine.innerHTML = line.replace(/(drwxr-xr-x|total|-rw-r--r--)/g, '<span class="text-blue-400">$1</span>');
        } else if (line.includes('projects found') || line.includes('experiences') || line.includes('posts published')) {
          outputLine.innerHTML = line.replace(/(\d+)/g, '<span class="text-yellow-400">$1</span>');
        } else if (line.includes('ðŸš€')) {
          outputLine.innerHTML = line.replace(/ðŸš€/g, '<span class="text-yellow-400">ðŸš€</span>');
        } else if (line.startsWith('â€¢')) {
          outputLine.innerHTML = line.replace(/^â€¢ /, 'â€¢ <span class="text-cyan-400">').replace(/$/, '</span>');
        } else {
          outputLine.textContent = line;
        }
        
        this.output.appendChild(outputLine);
      });
    }
    
    hideCursor() {
      this.cursor.style.display = 'none';
    }
    
    sleep(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
    }
  }
  
  // Initialize terminal when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new Terminal(terminalData); // terminalData is provided by define:vars
  });
  
  // Also initialize on Astro page load (for SPA-like navigation)
  document.addEventListener('astro:page-load', () => {
    // Reset terminal state
    const output = document.getElementById('terminal-output');
    const cursor = document.getElementById('cursor');
    
    if (output && cursor) {
      output.innerHTML = '';
      cursor.style.display = 'inline-block';
      
      new Terminal(terminalData); // terminalData is provided by define:vars
    }
  });
</script>

<style>
  .terminal-container {
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.8);
  }
  
  .animate-fade-in {
    animation: fadeIn 0.8s ease-in-out;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  @media (max-width: 768px) {
    .terminal-body {
      font-size: 12px;
      padding: 1rem;
      min-height: 500px;
    }
    
    .terminal-header {
      padding: 0.75rem 1rem;
    }
    
    .terminal-header .text-sm {
      font-size: 11px;
    }
    
    /* Fix command line wrapping on mobile - make it behave like real terminal */
    .terminal-body .command-line {
      word-wrap: break-word;
      overflow-wrap: break-word;
      white-space: pre-wrap;
      line-height: 1.4;
    }
    
    .terminal-body .command-text {
      word-break: break-all;
      overflow-wrap: break-word;
    }
    
    /* Ensure wrapped lines have proper indentation like a real terminal */
    .terminal-body .command-line {
      text-indent: 0;
      padding-left: 0;
    }
    
    /* Style the terminal input line similarly */
    .terminal-input {
      word-wrap: break-word;
      overflow-wrap: break-word;
      white-space: pre-wrap;
      line-height: 1.4;
    }
  }
</style>